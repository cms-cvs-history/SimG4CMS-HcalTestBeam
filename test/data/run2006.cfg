process PROD  = {
	service = MessageLogger
	{
      	untracked vstring destinations = { "cout" }

      	untracked vstring categories = {"CaloSim",
					"EcalGeom",
					"EcalSim",
					"HCalGeom",
					"HcalSim",
					"HcalTBSim",
					"SimHCalData",
					"SimG4CoreGeometry",
					"SimG4CoreApplication",
					"VertexGenerator"}
	untracked vstring debugModules = { "*" }
      	untracked PSet cout    = {string threshold = "DEBUG"
				PSet INFO     = { int32 limit = 0 }
				PSet DEBUG    = { int32 limit = 0 }
				PSet CaloSim  = { int32 limit = 1000000 }
				PSet EcalGeom = { int32 limit = 1000000 }
				PSet EcalSim  = { int32 limit = 1000000 }
				PSet HCalGeom = { int32 limit = 1000000 }
				PSet HcalSim  = { int32 limit = 1000000 }
				PSet HcalTBSim= { int32 limit = 1000000 }
				PSet SimHCalData     = { int32 limit = 1000000}
				PSet SimG4CoreGeometry = { int32 limit = 10000}
				PSet SimG4CoreApplication = { int32 limit = 10000}
				PSet VertexGenerator = { int32 limit = 1000000}
				}
   	}
	
	service = RandomNumberGeneratorService
	{
      	untracked uint32 sourceSeed = 135799753
      	PSet moduleSeeds =
      		{
        	 untracked uint32 VtxSmeared = 123456789
      		}
   	}
	block common_beam_direction_parameters = {
		untracked double MinEta =  0.5655
		untracked double MaxEta =  0.5655
		untracked double MinPhi =  0.1309
		untracked double MaxPhi =  0.1309
		untracked double BeamPosition = -800.00
	}
    
	include "SimGeneral/HepPDTESSource/data/pdt.cfi"

	# flat random E-gun, single pion
	#
	# to run it along with CMS detector simulation
	# (OscarProducer) make sure to select QGSP physics
	# list, instead DummyPhysics ("Dummy" has only EM 
	# process and wont know to model interactions of
	# hadrons with matter)
	#
	source = FlatRandomEGunSource
	{
		untracked int32 maxEvents = 5
		untracked PSet PGunParameters =
		{
			untracked vint32 PartID = {211}
			using common_beam_direction_parameters
			untracked double MinE   =  9.99
			untracked double MaxE   = 10.01
		}
		untracked int32 Verbosity = 0 # set to 1 (or greater)  for printouts
	}

	module VtxSmeared = VertexGenerator 
	{
		string type = "IOMC/EventVertexGenerators/BeamProfileVertexGenerator"
		untracked double BeamMeanX = 0.
		untracked double BeamMeanY = 0.
		untracked double BeamSigmaX = 0.001
		untracked double BeamSigmaY = 0.001
		untracked bool   GaussianProfile = true
		using common_beam_direction_parameters
	}

	#Geometry
        include "SimG4CMS/HcalTestBeam/test/data/TB2006GeometryXML.cfi"

	module o1 = PoolOutputModule { untracked string fileName = "sim2006.root" }
	module SimG4Object = OscarProducer 
	{ 
		#
		bool NonBeamEvent = false
		untracked int32 G4EventManagerVerbosity = 0
		untracked int32 G4StackManagerVerbosity = 0
 		untracked int32 G4TrackingManagerVerbosity = 0
 		#
		bool UseMagneticField = false
		bool OverrideUserStackingAction = true
		bool StoreRndmSeeds = false
		bool RestoreRndmSeeds = false
		#
		string PhysicsTablesDirectory = "PhysicsTables"
		bool StorePhysicsTables = false
		bool RestorePhysicsTables = false
		PSet MagneticField =
		{
			double delta = 1.
		}
               	PSet Physics =
		{
			string type = "SimG4Core/Physics/QGSP"
			bool DummyEMPhysics = false
			bool CutsPerRegion = true
			double DefaultCutValue = 1. # cuts in cm, i.e. 10m 
			double G4BremsstrahlungThreshold = 0.5 # cut in GeV
			untracked int32 Verbosity = 0  # 1 will print cuts as they get set from DD
			                               # 2 will do as 1 + will dump Gean4 table of cuts			
		}

		PSet Generator = 
		{
			bool ApplyPtCuts = true
			bool ApplyEtaCuts = true
			bool ApplyPhiCuts = false
			double MinPhiCut =-3.14159265358979323846
			double MaxPhiCut = 3.14159265358979323846
			double MinEtaCut = -5.5
			double MaxEtaCut = 5.5
			double MinPtCut = 0.040
			double MaxPtCut = 999999.
			untracked int32 Verbosity = 0
	        }
			

		PSet RunAction = { string StopFile = "StopRun" }
		PSet EventAction =
		{
			bool CollapsePrimaryVertices = false
			string StopFile = "StopRun"
			#
			untracked bool debug = false
		}
		PSet TrackingAction = 
		{ 
			untracked bool DetailedTiming = false 
		}
 		PSet SteppingAction =
		{
			bool   KillBeamPipe = true
			double CriticalEnergyForVacuum = 2.0
			double CriticalDensity = 1.e-15
			#
			untracked int32  Verbosity = 0
		}
		PSet CaloSD = 
		{
			double EminTrack = 1.0
			untracked int32  CheckHits = 25
			untracked bool   UseMap = true
			untracked int32  Verbosity = 0
			untracked bool   DetailedTiming = false
		}
		PSet ECalSD = 
		{
			bool   UseBirkLaw = false
			double BirkC1 = 0.013
			double BirkC2 = 9.6e-6
		}
		PSet HCalSD = 
		{
			bool   UseBirkLaw = false
			double BirkC1 = 0.013
			double BirkC2 = 9.6e-6
			bool   UseShowerLibrary = false
			bool   TestNumberingScheme = true
			untracked bool   UseHF     = false
			untracked bool   forTBH2   = true
		}
		PSet CaloTrkProcessing = 
		{
			bool   TestBeam  = true
			double EminTrack = 0.01
		}                     
		PSet HFShower =    
		{
			double ProbMax   = 0.7268
			double CFibre    = 0.50
		}
		PSet HFShowerLibrary = 
		{
			FileInPath FileName = "SimG4CMS/Calo/data/hfshowerlibrary_lhep.root"
			string TreeEMID  = "h3"
			string TreeHadID = "h8"
		}
		PSet HFCherenkov = 
		{
			double RefIndex        = 1.459
			double Lambda1         = 280.0
			double Lambda2         = 700.0
			double Aperture        = 0.33
			double ApertureTrapped = 0.22
			double Gain            = 0.33
			bool   CheckSurvive    = false
		}

		PSet HcalTB06BeamSD = 
		{
			bool   UseBirkLaw = false
			double BirkC1 = 0.013
			double BirkC2 = 9.6e-6
		}

		#
		VPSet Watchers = 
		{ 
			{ string type = "HcalTB06Analysis"
                        PSet HcalTB06Analysis =
                        {
				vstring Names         = {"HcalHits",
							 "EcalHitsEB"}
				using common_beam_direction_parameters
				untracked string FileName = "HcalTB06.root"
				untracked bool   Verbose  = true
				untracked double ETtotMax = 20.0
				untracked double EHCalMax = 2.0
                        }}
		}
	}
	path p1 = { VtxSmeared, SimG4Object }
	endpath outpath = { o1 }

	service = DaqMonitorROOTBackEnd{ }

	service  = Tracer {}

	service = Timing {}
}		
